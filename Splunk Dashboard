<dashboard>
  <label>Job Status Dashboard</label>

  <fieldset submitButton="false">
    <!-- Job Name Filter -->
    <input type="dropdown" token="job_name_filter" searchWhenChanged="true">
      <label>Job Name</label>
      <search>
        <query>
          index=appl_arc817_prod_na sourcetype=job_status_json
          | stats count by "Job Name"
          | sort "Job Name"
        </query>
      </search>
      <fieldForLabel>Job Name</fieldForLabel>
      <fieldForValue>Job Name</fieldForValue>
      <default>*</default>
      <prefix>*</prefix>
      <suffix>*</suffix>
      <choice value="*">All</choice>
    </input>

    <!-- Status Filter -->
    <input type="dropdown" token="status_filter" searchWhenChanged="true">
      <label>Status</label>
      <search>
        <query>
          index=appl_arc817_prod_na sourcetype=job_status_json
          | stats count by Status
          | sort Status
        </query>
      </search>
      <fieldForLabel>Status</fieldForLabel>
      <fieldForValue>Status</fieldForValue>
      <default>*</default>
      <prefix>*</prefix>
      <suffix>*</suffix>
      <choice value="*">All</choice>
    </input>

    <!-- Target Table Filter -->
    <input type="dropdown" token="target_table_filter" searchWhenChanged="true">
      <label>Target Table</label>
      <search>
        <query>
          index=appl_arc817_prod_na sourcetype=job_status_json
          | stats count by "Target Table"
          | sort "Target Table"
        </query>
      </search>
      <fieldForLabel>Target Table</fieldForLabel>
      <fieldForValue>Target Table</fieldForValue>
      <default>*</default>
      <prefix>*</prefix>
      <suffix>*</suffix>
      <choice value="*">All</choice>
    </input>

    <!-- Nanon Table Filter -->
    <input type="dropdown" token="nanon_table_filter" searchWhenChanged="true">
      <label>Nanon Table</label>
      <search>
        <query>
          index=appl_arc817_prod_na sourcetype=job_status_json
          | stats count by "Nanon table"
          | sort "Nanon table"
        </query>
      </search>
      <fieldForLabel>Nanon table</fieldForLabel>
      <fieldForValue>Nanon table</fieldForValue>
      <default>*</default>
      <prefix>*</prefix>
      <suffix>*</suffix>
      <choice value="*">All</choice>
    </input>

    <!-- Time Picker -->
    <input type="time" token="time_range">
      <label>Select Time Range</label>
      <default>
        <earliest>-24h@h</earliest>
        <latest>now</latest>
      </default>
    </input>
  </fieldset>

  <!-- Main Table Panel -->
  <row>
    <panel>
      <title>Job Status Report</title>
      <table>
        <search>
          <query>
            index=appl_arc817_prod_na sourcetype=job_status_json
            earliest=$time_range.earliest$ latest=$time_range.latest$
            | search "Job Name"="$job_name_filter$" Status="$status_filter$" "Target Table"="$target_table_filter$" "Nanon table"="$nanon_table_filter$"
            | sort 0 "Job Name"
            | table "Job Name" "Run Date" Status "Target Table" "Nanon table"
          </query>
        </search>
        <option name="count">20</option>
        <option name="drilldown">none</option>
      </table>
    </panel>
  </row>
</dashboard>

-----------------------------------------------------------
import json
import re
from datetime import datetime

def parse_html_table(html):
    # Find the first <table ...> ... </table>
    table_match = re.search(r'<table[^>]*>(.*?)</table>', html, re.DOTALL | re.IGNORECASE)
    if not table_match:
        print("No table found")
        return []

    table_html = table_match.group(1)

    # Extract all rows between <tr ...>...</tr> (ignore attributes inside tr)
    rows = re.findall(r'<tr[^>]*>(.*?)</tr>', table_html, re.DOTALL | re.IGNORECASE)
    if not rows:
        print("No rows found in table")
        return []

    # Extract header columns from first row
    headers = re.findall(r'<th[^>]*>(.*?)</th>', rows[0], re.DOTALL | re.IGNORECASE)
    headers = [re.sub(r'<.*?>', '', h).strip() for h in headers]

    data = []
    # Get current timestamp in ISO format
    current_ts = datetime.now().isoformat()

    # Process each data row (skip header)
    for row_html in rows[1:]:
        # Extract all <td> contents, ignoring tags inside td
        cols = re.findall(r'<td[^>]*>(.*?)</td>', row_html, re.DOTALL | re.IGNORECASE)
        cols = [re.sub(r'<.*?>', '', c).strip() for c in cols]

        # Replace empty or whitespace-only values with "blank"
        cols = [c if c else "blank" for c in cols]

        if len(cols) == len(headers):
            entry = dict(zip(headers, cols))
            entry["timestamp"] = current_ts  # Add timestamp field
            data.append(entry)
        else:
            print("Skipping a row due to column mismatch")

    return data

# Read your HTML file
with open('your_file.html', 'r', encoding='utf-8') as f:
    html_content = f.read()

table_data = parse_html_table(html_content)

# Output JSON
with open('output.json', 'w', encoding='utf-8') as f:
    json.dump(table_data, f, indent=2)

print("Parsed JSON with timestamps saved to output.json")


